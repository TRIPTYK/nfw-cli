import { BaseSerializer } from "./base.serializer";
import { api, env , port, url } from "../../config/environment.config";
import { SerializerParams } from "./serializerParams";
import { Request } from "express";
import { getRepository } from "typeorm";
<% foreignKeys.forEach(foreignKey => { %>
import { <%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %>Serializer } from "./<%- lowercaseEntity(foreignKey.REFERENCED_TABLE_NAME) %>.serializer";
import { <%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %> } from "../models/<%- lowercaseEntity(foreignKey.REFERENCED_TABLE_NAME) %>.model";
<% }); %>

export class <%- entityCapitalize %>Serializer extends BaseSerializer {

  public static withelist : Array<string> = [<%- allColumns %>];

  constructor(serializerParams = new SerializerParams()) {
  super('<%- pluralize.singular(entityLowercase) %>');

    const data = {
  whitelist: <%- entityCapitalize %>Serializer.whitelist,
  relationships: {
  <% foreignKeys.forEach(foreignKey => { %>
    <%- foreignKey.COLUMN_NAME %> : {
    type : <%- lowercaseEntity(foreignKey.REFERENCED_TABLE_NAME) %>
    }
  <% }); %>
  },
  };

  this.setupPagination(data, serializerParams);

  this.serializer.register(this.type, data);

  <% foreignKeys.forEach((foreignKey) => { %>
    this.serializer.register(<%- lowercaseEntity(foreignKey.REFERENCED_TABLE_NAME) %>, {
    whitelist: <%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %>Serializer.whitelist
    });
  <% }); %>
  }
}
