import * as HttpStatus from "http-status";

import * as Boom from "boom";
import { Request, Response } from "express";
import { <%- entityCapitalize %> } from "./../models/<%- entityLowercase %>.model";
import { <%- entityCapitalize %>Serializer } from "../serializers/<%- entityLowercase %>.serializer";
import { <%- entityCapitalize %>Repository } from "./../repositories/<%- entityLowercase %>.repository";
import { getRepository, getCustomRepository } from "typeorm";
import { BaseController } from "./base.controller";
const promisify = require('util')

/**
 *
 */
export class <%- entityCapitalize %>Controller extends BaseController {

  /** */
  constructor() { super(); }

<% if (options.read) { %>
  /**
   * Get serialized <%- entityLowercase %>
   *
   * @param req Request
   * @param res Response
   *
   * @public
   */
   public async get(req: Request, res : Response, next : Function) {
    try {
      const repository = getCustomRepository(<%- entityCapitalize %>Repository);
<<<<<<< HEAD
      const <%- entityLowercase %> = await repository.jsonAPI_findOne(req,req.params.id,[<%- foreignKeys.map(e => pluralize.plural(e.REFERENCED_TABLE_NAME)) %>]);

      if (!<%- entityLowercase %>) throw Boom.notFound();

      res.json( new <%- entityCapitalize %>Serializer(req).serialize(<%- entityLowercase %>) );
=======
      const [<%- entityLowercase %>,totalCount] = await Promise.all([repository.jsonAPI_findOne(req,req.params.id,[]),repository.count()]);
      res.json( new <%- entityCapitalize %>Serializer(req,totalCount).serialize(<%- entityLowercase %>) );
>>>>>>> regexTest
    }catch(e) {
      next(e);
    }
  }
<% } %>



<% if (options.create) { %>
  /**
   * Create new <%- entityLowercase %>
   *
   * @param req Request
   * @param res Response
   * @param next Function
   *
   * @public
   */
  public async create (req: Request, res : Response, next: Function) {
    try {
      const repository = getRepository(<%- entityCapitalize %>);
      const <%- entityLowercase %> = new <%- entityCapitalize %>(req.body);
      const saved = await repository.save(<%- entityLowercase %>);
      res.status( HttpStatus.CREATED );
      res.json( new <%- entityCapitalize %>Serializer().serialize(saved) );
    }
    catch (e) { next( e.message ); }
  }
<% } %>

<% if (options.update) { %>
  /**
   * Update existing <%- entityLowercase %>
   *
   * @param req Request
   * @param res Response
   * @param next Function
   *
   * @public
   */
  public async update (req: Request, res : Response, next: Function) {

    try {
      const repository = getRepository(<%- entityCapitalize %>);
      const <%- entityLowercase %> = await repository.findOne(req.params.id);
      if (!<%- entityLowercase %>) throw Boom.notFound();
      repository.merge(<%- entityLowercase %>, req.body);
      repository.save(<%- entityLowercase %>);
      res.json(new <%- entityCapitalize %>Serializer().serialize(<%- entityLowercase %>) );
    }
    catch(e) { next( e.message ); }

  };
<% } %>

<% if (options.read) {%>
  /**
   * Get <%- entityLowercase %> list
   *
   * @param req Request
   * @param res Response
   * @param next Function
   *
   * @public
   */
  public async list (req: Request, res : Response, next: Function) {

    try {
      const repository = getCustomRepository(<%- entityCapitalize %>Repository);
<<<<<<< HEAD
      const [<%- entityLowercase %>s,total] = await repository.JSONAPIRequest(req.query,[<%- foreignKeys.map(e => pluralize.plural(e.REFERENCED_TABLE_NAME)) %>]).getManyAndCount();
=======
      const [<%- entityLowercase %>s,total] = await Promise.all([repository.jsonAPI_find(req,[]),repository.count()]);
>>>>>>> regexTest
      res.json( new <%- entityCapitalize %>Serializer(req,total).serialize(<%- entityLowercase %>s)  );
    }catch(e) {
      next(e);
    }
  }
<% } %>

<% if (options.delete) {%>
  /**
   * Delete <%- entityLowercase %>
   *
   * @param req Request
   * @param res Response
   * @param next Function
   *
   * @public
   */
  public async remove (req: Request, res : Response, next: Function) {

    try {
      const <%- entityLowercase %>Repository = getRepository(<%- entityCapitalize %>);
      const <%- entityLowercase %> = await <%- entityLowercase %>Repository.findOne(req.params.id);
      if (!<%- entityLowercase %>) throw Boom.notFound();
      const repository = getRepository(<%- entityCapitalize %>);
      await repository.remove(<%- entityLowercase %>);
      res.sendStatus(HttpStatus.NO_CONTENT).end();
    }
    catch(e) { next(e); }

  }
<% } %>
}
