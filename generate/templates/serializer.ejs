import { BaseSerializer } from "./base.serializer";
import { api, env , port, url } from "../../config/environment.config";
import { SerializerParams } from "./serializerParams";
import { Request } from "express";
import { getRepository } from "typeorm";
<% foreignKeys.forEach(foreignKey => { %>
import { <%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %>Serializer } from "./<%- lowercaseEntity(foreignKey.REFERENCED_TABLE_NAME) %>.serializer"
import { <%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %> } from "../models/<%- lowercaseEntity(foreignKey.REFERENCED_TABLE_NAME) %>.model"
<% }); %>

export class <%- entityCapitalize %>Serializer extends BaseSerializer {

  public static withelist : Array<string> = [<%- allColumns %>];

  constructor(serializerParams = null) {
    if (!serializerParams) serializerParams = new SerializerParams();

    const data = {
      attributes : <%- entityCapitalize %>Serializer.withelist,
      dataLinks : {
        self : (dataSet,data) => {
          if (data.id)
            return `${url}/api/${api}/${this.type}/${data.id}`
        }
      },
      
      <% foreignKeys.forEach(foreignKey => { %>
        <%- foreignKey.COLUMN_NAME %> : {
           ref : '<%- foreignKey.REFERENCED_COLUMN_NAME %>',
           attributes : <%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %>Serializer.withelist,
           <% if (pluralize.isPlural(foreignKey.COLUMN_NAME)) { %>
           valueForRelationship : async (relationship) => {
              return await getRepository(<%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %>).findOne(relationship.<%- foreignKey.COLUMN_NAME %>);
           } <% } -%>
        },
        <% }); %>
        <% foreignKeys.filter(foreignKey => pluralize.isSingular(foreignKey.COLUMN_NAME)).forEach(foreignKey => { %>
        <%- pluralize.plural(foreignKey.COLUMN_NAME) %> : { //serializer type name is always plural for deserializer
          valueForRelationship : async (relationship) => {
             return await getRepository(<%- capitalizeEntity(foreignKey.REFERENCED_TABLE_NAME) %>).findOne(relationship.<%- foreignKey.COLUMN_NAME %>);
          }
        },
      <% }); %>
    };

    if (serializerParams.hasPaginationEnabled())
    {
      const { total , request } = serializerParams.getPaginationData();
      const page = parseInt(request.query.page.number);
      const size = request.query.page.size;
      const baseUrl = `${url}/api/${api}`;
      const max = Math.ceil(total / size);

      data["topLevelLinks"] = {
        self : () =>  `${baseUrl}/${this.type}${request.url}`,
        next : () => `${baseUrl}/${this.type}${this.replacePage(request.url,page + 1 > max ? max  : page + 1)}`,
        prev : () => `${baseUrl}/${this.type}${this.replacePage(request.url,page - 1 <   1 ? page : page - 1)}`,
        last : () => `${baseUrl}/${this.type}${this.replacePage(request.url,max)}` ,
        first : () =>  `${baseUrl}/${this.type}${this.replacePage(request.url,1)}`
      }
    }

    super(serializerParams.getType() ? serializerParams.getType() : '<%- pluralize.plural(entityLowercase) %>', data );
  }
}
